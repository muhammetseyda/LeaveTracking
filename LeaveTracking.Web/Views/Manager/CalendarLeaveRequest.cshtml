@using LeaveTracking.Application.DTOs.LeaveRequestDTOs
@using LeaveTracking.Domain.Enums
@model IEnumerable<LeaveRequestDto>
@{
    ViewBag.Title = "İzin Takvimi";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link href='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.css' rel='stylesheet' />

<div class="row">
    <div class="col-md-12">
        <h2>İzin Takvimi - Yönetici Görünümü</h2>
        <p class="text-muted">Çalışanların izin taleplerini takvim üzerinde görüntüleyin ve yönetin</p>
        <hr />
    </div>
</div>

<div class="row mb-3">
    <div class="col-md-8">
        <div class="card">
            <div class="card-body p-3">
                <div class="form-row">
                    <div class="col-md-3">
                        <label for="statusFilter" class="form-label">Durum Filtresi:</label>
                        <select id="statusFilter" class="form-control form-control-sm">
                            <option value="all">Tümü</option>
                            <option value="pending">Bekleyen</option>
                            <option value="approved">Onaylandı</option>
                            <option value="rejected">Reddedildi</option>
                        </select>
                    </div>
                    <div class="col-md-3">
                        <label for="typeFilter" class="form-label">İzin Türü:</label>
                        <select id="typeFilter" class="form-control form-control-sm">
                            <option value="all">Tümü</option>
                            <option value="1">Yıllık İzin</option>        
                            <option value="2">Hastalık İzni</option>       
                            <option value="3">Doğum İzni</option>          
                            <option value="4">Ölüm İzni</option>         
                            <option value="5">Evlilik İzni</option>        
                        </select>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Renk Kodları:</label>
                        <div class="d-flex flex-wrap">
                            <small class="mr-3"><span class="badge bg-warning">Bekleyen</span></small>
                            <small class="mr-3"><span class="badge bg-success">Onaylı</span></small>
                            <small class="mr-3"><span class="badge bg-danger">Red</span></small>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card">
            <div class="card-body p-3">
                <h6 class="card-title">Özet Bilgiler</h6>
                <div class="row text-center">
                    <div class="col-3">
                        <small class="text-muted">Toplam</small><br>
                        <strong id="totalCount">@(Model?.Count() ?? 0)</strong>
                    </div>
                    <div class="col-3">
                        <small class="text-muted">Bekleyen</small><br>
                        <strong id="pendingCount" class="text-warning">@(Model?.Count(x => x.Status == LeaveStatus.Pending) ?? 0)</strong>
                    </div>
                    <div class="col-3">
                        <small class="text-muted">Onaylı</small><br>
                        <strong id="approvedCount" class="text-success">@(Model?.Count(x => x.Status == LeaveStatus.Approved) ?? 0)</strong>
                    </div>
                    <div class="col-3">
                        <small class="text-muted">Red</small><br>
                        <strong id="rejectedCount" class="text-danger">@(Model?.Count(x => x.Status == LeaveStatus.Rejected) ?? 0)</strong>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-md-12">
        <div class="card">
            <div class="card-body">
                <div id="calendar"></div>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="leaveDetailModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">İzin Talebi Detayı</h5>
                <button type="button" class="close" data-bs-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="row" id="conflictUserRow" style="display: none;">
                    <div class="col-md-12">
                        <strong>Uyarı:</strong>
                        <div class="alert alert-danger" id="modalConflictUser"></div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <strong>Çalışan:</strong>
                        <p id="modalEmployeeName"></p>
                    </div>
                    <div class="col-md-6">
                        <strong>Email:</strong>
                        <p id="modalEmployeeEmail"></p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <strong>İzin Türü:</strong>
                        <p id="modalLeaveType"></p>
                    </div>
                    <div class="col-md-6">
                        <strong>Durum:</strong>
                        <p id="modalStatus"></p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4">
                        <strong>Başlangıç:</strong>
                        <p id="modalStartDate"></p>
                    </div>
                    <div class="col-md-4">
                        <strong>Bitiş:</strong>
                        <p id="modalEndDate"></p>
                    </div>
                    <div class="col-md-4">
                        <strong>Süre:</strong>
                        <p id="modalDuration"></p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <strong>Açıklama:</strong>
                        <p id="modalDescription"></p>
                    </div>
                </div>
                <div class="row" id="rejectionReasonRow" style="display: none;">
                    <div class="col-md-12">
                        <strong>Red Sebebi:</strong>
                        <div class="alert alert-danger" id="modalRejectionReason"></div>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-12">
                        <strong>Talep Tarihi:</strong>
                        <p id="modalCreatedAt"></p>
                    </div>
                </div>
            </div>
            <div class="modal-footer" id="modalActions">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="rejectModal" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">İzin Talebini Reddet</h5>
                <button type="button" class="close" data-bs-dismiss="modal">
                    <span>&times;</span>
                </button>
            </div>
            <form asp-action="RejectLeave" asp-controller="Manager" method="post" onsubmit="handleSubmit(this)">
                @Html.AntiForgeryToken()
                <div class="modal-body">
                    <input type="hidden" id="rejectLeaveId" name="LeaveRequestId" />
                    <input type="hidden" id="page" name="page" value="2" />
                    <p>Çalışan: <strong id="rejectEmployeeName"></strong></p>
                    <div class="form-group">
                        <label for="rejectedReason">Red Sebebi:</label>
                        <textarea name="RejectReason" id="rejectedReason" class="form-control" rows="4"
                                  placeholder="İzin talebinin reddedilme sebebini açıklayın..." required></textarea>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                    <button type="submit" class="btn btn-danger">Reddet</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script src='https://cdn.jsdelivr.net/npm/fullcalendar@6.1.8/index.global.min.js'></script>

<script>
    let calendar;
    let allLeaveRequests = [];

    @if (Model != null)
    {
            <text>
            allLeaveRequests = [
                @foreach (var request in Model)
                {
                        <text>
                        {
                            id: @request.Id,
                            title: '@Html.Raw(request.User?.FirstName + " " + request.User?.LastName)',
                            start: '@request.StartDate.ToString("yyyy-MM-dd")',
                            end: '@request.EndDate.AddDays(1).ToString("yyyy-MM-dd")',
                            backgroundColor: '@GetStatusColor(request.Status)',
                            borderColor: '@GetStatusColor(request.Status)',
                            textColor: 'white',
                            extendedProps: {
                                employeeName: '@Html.Raw(request.User?.FirstName + " " + request.User?.LastName)',
                                employeeEmail: '@request.User?.Email',
                                leaveType: '@request.LeaveType.ToString()',
                                status: '@request.Status.ToString()',
                                description: '@Html.Raw(request.Description ?? "")',
                                rejectedReason: '@Html.Raw(request.RejectedReason ?? "")',
                                createdAt: '@request.CreatedAt.ToString("dd.MM.yyyy HH:mm")',
                                startDate: '@request.StartDate.ToString("dd.MM.yyyy")',
                                endDate: '@request.EndDate.ToString("dd.MM.yyyy")',
                                duration: '@((request.EndDate - request.StartDate).Days + 1)',
                                conflictLeaveUser: '@request.ConflictLeaveUser'
                            }
                        },
                        </text>
                }
            ];
            </text>
    }

    document.addEventListener('DOMContentLoaded', function() {
        var calendarEl = document.getElementById('calendar');

        calendar = new FullCalendar.Calendar(calendarEl, {
            initialView: 'dayGridMonth',
            locale: 'tr',
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,listWeek'
            },
            height: 'auto',
            events: allLeaveRequests,
            eventClick: function(info) {
                showLeaveDetail(info.event);
            },
            eventDidMount: function(info) {
                info.el.title = info.event.extendedProps.employeeName + ' - ' +
                               getLeaveTypeText(info.event.extendedProps.leaveType);
            }
        });

        calendar.render();

        document.getElementById('statusFilter').addEventListener('change', filterEvents);
        document.getElementById('typeFilter').addEventListener('change', filterEvents);
    });

    function filterEvents() {
        const statusFilter = document.getElementById('statusFilter').value;
        const typeFilter = document.getElementById('typeFilter').value;

        let filteredEvents = allLeaveRequests.filter(event => {
            let statusMatch = statusFilter === 'all' ||
                            (statusFilter === 'pending' && event.extendedProps.status === 'Pending') ||
                            (statusFilter === 'approved' && event.extendedProps.status === 'Approved') ||
                            (statusFilter === 'rejected' && event.extendedProps.status === 'Rejected');

            let typeMatch = typeFilter === 'all' || event.extendedProps.leaveType === getLeaveTypeFromValue(typeFilter);

            return statusMatch && typeMatch;
        });

        calendar.removeAllEvents();
        calendar.addEventSource(filteredEvents);
    }

    function showLeaveDetail(event) {
        const props = event.extendedProps;

        document.getElementById('modalEmployeeName').textContent = props.employeeName;
        document.getElementById('modalEmployeeEmail').textContent = props.employeeEmail;
        document.getElementById('modalLeaveType').innerHTML = getLeaveTypeBadge(props.leaveType);
        document.getElementById('modalStatus').innerHTML = getStatusBadge(props.status);
        document.getElementById('modalStartDate').textContent = props.startDate;
        document.getElementById('modalEndDate').textContent = props.endDate;
        document.getElementById('modalDuration').textContent = props.duration + ' gün';
        document.getElementById('modalDescription').textContent = props.description || 'Açıklama girilmemiş';
        document.getElementById('modalCreatedAt').textContent = props.createdAt;

        if (props.status === 'Rejected' && props.rejectedReason) { 
            document.getElementById('modalRejectionReason').textContent = props.rejectedReason;
            document.getElementById('rejectionReasonRow').style.display = 'block';
        } else {
            document.getElementById('rejectionReasonRow').style.display = 'none';
        }
        if (props.conflictLeaveUser ) {
            document.getElementById('modalConflictUser').textContent = 'Bu tarihlerde başka çalışanların da izni var.';
            document.getElementById('conflictUserRow').style.display = 'block';
        } else {
            document.getElementById('conflictUserRow').style.display = 'none';
        }

        const actionsDiv = document.getElementById('modalActions');
        if (props.status === 'Pending') {
            actionsDiv.innerHTML = `
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
                <button type="button" class="btn btn-success" onclick="approveLeave(${event.id})">Onayla</button>
                <button type="button" class="btn btn-danger" onclick="showRejectModal(${event.id}, '${props.employeeName}')">Reddet</button>
            `;
        } else {
            actionsDiv.innerHTML = `
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Kapat</button>
            `;
        }

        $('#leaveDetailModal').modal('show');
    }

    function approveLeave(leaveId) {
        if (confirm('Bu izin talebini onaylamak istediğinizden emin misiniz?')) {
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '@Url.Action("ApproveLeave", "Manager")';

            const tokenInput = document.createElement('input');
            tokenInput.type = 'hidden';
            tokenInput.name = '__RequestVerificationToken';
            tokenInput.value = document.querySelector('input[name="__RequestVerificationToken"]').value;

            const idInput = document.createElement('input');
            idInput.type = 'hidden';
            idInput.name = 'id';
            idInput.value = leaveId;

            const pageInput = document.createElement('input');
            pageInput.type = 'hidden';
            pageInput.name = 'page';
            pageInput.value = 2;

            form.appendChild(tokenInput);
            form.appendChild(idInput);
            form.appendChild(pageInput);
            document.body.appendChild(form);
            form.submit();
        }
    }

    function showRejectModal(leaveId, employeeName) {
        document.getElementById('rejectLeaveId').value = leaveId;
        document.getElementById('rejectEmployeeName').textContent = employeeName;
        document.getElementById('rejectedReason').value = '';
        $('#leaveDetailModal').modal('hide');
        $('#rejectModal').modal('show');
    }

    function getLeaveTypeText(type) {
        switch(type) {
            case 'Annual': return 'Yıllık İzin';
            case 'Sick': return 'Hastalık İzni';
            case 'Maternity': return 'Doğum İzni';
            case 'Bereavement': return 'Ölüm İzni';
            case 'Marriage': return 'Evlilik İzni';
            default: return type;
        }
    }


    function getLeaveTypeBadge(type) {
        switch (type) {
            case 'Annual':return '<span class="badge bg-primary">Yıllık İzin</span>';
            case 'Sick':return '<span class="badge bg-warning">Hastalık İzni</span>';
            case 'Maternity':return '<span class="badge bg-info">Doğum İzni</span>';
            case 'Bereavement':return '<span class="badge bg-dark">Ölüm İzni</span>';
            case 'Marriage':return '<span class="badge bg-success">Evlilik İzni</span>';
            default:return '<span class="badge bg-light">' + type + '</span>';
        }

    }

    function getStatusBadge(status) {
        switch(status) {
            case 'Pending': return '<span class="badge bg-warning">Bekleyen</span>';
            case 'Approved': return '<span class="badge bg-success">Onaylandı</span>';
            case 'Rejected': return '<span class="badge bg-danger">Reddedildi</span>';
            default: return '<span class="badge bg-light">' + status + '</span>';
        }
    }

    function getLeaveTypeFromValue(value) {
        switch (value) {
            case '1': return 'Annual';
            case '2': return 'Sick';
            case '3': return 'Maternity';
            case '4': return 'Bereavement';
            case '5': return 'Marriage';
            default: return '';
        }
    }
</script>
<script>
    function handleSubmit(form) {
        const btn = form.querySelector("button[type='submit']");
        btn.disabled = true;
        btn.innerHTML = '<span class="spinner-border spinner-border-sm"></span> Gönderiliyor...';
    }
</script>

@functions {
    string GetStatusColor(LeaveStatus status)
    {
        return status switch
        {
            LeaveStatus .Pending => "#ffc107",
            LeaveStatus.Approved => "#28a745",
            LeaveStatus.Rejected => "#dc3545",
            _ => "#6c757d"
        };
    }
}